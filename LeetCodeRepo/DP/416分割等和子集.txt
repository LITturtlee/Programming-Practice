//思路:看做一个要装满sum/2的背包问题，注i，j均是从1开始

//状态:待装的物品，背包容量，
//dp数组:dp[i][j]，表示到第i给物品此时有j的容量时是否可以装满
//选择:装或者不装
//转移方程:dp[i][j] = dp[i-1][j](啥也不装)||dp[i-1][j-nums[i-1]]
class Solution {
    public boolean canPartition(int[] nums) {
        int sum = 0;
        for(int num:nums)sum+=num;
        if(sum%2!=0)return false;
        int n = nums.length+1, m = (sum/2) + 1;
        boolean[][] dp = new boolean[n][m];
        //basecase
        // for(int i=1;i<m;i++)dp[0][i] = false;
        for(int i=0;i<n;i++)dp[i][0] = true;

        for(int i=1;i<n;i++){
            for(int j=1;j<m;j++){                
                dp[i][j] = dp[i-1][j] || (j-nums[i-1]>=0?dp[i-1][j-nums[i-1]]:false);
            }
        }
        return dp[n-1][m-1];
    }
}