//状态:i,j 即坐标
//dp数组:dp[i][j] 表示到第i行j列时，最小和为多少
//选择:左下\下\右下
//转移方程: dp[i][j] = matrix[i][j] + min(dp[i-1][j],dp[i-1][j+1],dp[i-1][j-1])
//basecase dp[0][j] = matrix[0][j]
class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int m = matrix.length;
        //init
        int[][] dp = new int[matrix.length][matrix.length];
        for (int i = 0; i<m ;i++) {
            for(int j =0;j<m;j++){
               dp[i][j] = Integer.MAX_VALUE;
            }
        }
        //basecase
        for(int i=0;i<m;i++){
            dp[0][i] = matrix[0][i];
        }

        for(int i=1;i<m;i++){
            for(int j=0;j<m;j++){
                //选择
                for(int k=-1;k<2;k++){
                    if(j+k<0||j+k>=m)continue;
                    dp[i][j] = Math.min(dp[i][j],matrix[i][j]+dp[i-1][j+k]); 
                }
            }
        }

        int res = Integer.MAX_VALUE;
        for(int i=0;i<m;i++){
            res = Math.min(res,dp[m-1][i]);
        }
        return res;
    }
}