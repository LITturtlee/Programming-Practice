// 状态 i:天数 j:持有状态(0不持有,1持有)  k:可交易次数(无穷) 
// dp[i][j] 目前的收益
// 选择 买;卖;持有
// 无限次的购买
// 状态转移方程   dp[i][0] = max(dp[i-1][0],dp[i-1][1]+price[i])
//                dp[i][1] = max(dp[i-1][1],dp[i-1][0]-price[i])  
// 只购买一次
// 收益不累加的状态转移方程
//            dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] + prices[i]);
//            dp[i][1] = Math.max(dp[i - 1][1], -prices[i]);


// basecase  dp[1][0] = 0,  dp[1][1] = -prices[0]  
class Solution {
    public int maxProfit(int[] prices) {
        int[][] dp = new int[prices.length][2];
        dp[0][0] = 0;
        dp[0][1] = -prices[0];
        for(int i=1;i<prices.length;i++){
            dp[i][0] = Math.max(dp[i-1][0],dp[i-1][1]+prices[i]);
            dp[i][1] = Math.max(dp[i-1][1],dp[i-1][0]-prices[i]);
        }
        return dp[prices.length-1][0];
        // return 0;
    }
}



// //贪心算法  只要前后有利润差就进行买卖

// class Solution{
//     public int maxProfit(int[] prices) {
//         if(prices.length<2){
//             return 0;
//         }
//         int prePrice = prices[0];
//         int profit = 0;
//         for(int i=1;i<prices.length;i++){
//             int curPrice = prices[i];
//             profit += curPrice-prePrice>0?curPrice-prePrice:0;
//             prePrice = curPrice;
//         } 
//         return profit;
//     }
// }