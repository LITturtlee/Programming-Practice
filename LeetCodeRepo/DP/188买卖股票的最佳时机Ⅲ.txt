class Solution {
    public int maxProfit(int k, int[] prices) {
        //当k足够大时
        if(k>prices.length/2)return maxProfit_k_inf(prices);
        
        int[][][] dp = new int[prices.length][k+1][2];
        //basecase
        for(int i=0;i<k+1;i++){
            dp[0][i][0] = 0;
            dp[0][i][1] = -prices[0];
        }
        //迭代
        for(int i=1;i<dp.length;i++){
            for(int j=1;j<k+1;j++){
                dp[i][j][0] = Math.max(dp[i-1][j][0],dp[i-1][j][1]+prices[i]);
                dp[i][j][1] = Math.max(dp[i-1][j][1],dp[i-1][j-1][0]-prices[i]);
            }
        }

        return dp[prices.length-1][k][0];
    }

    public  int maxProfit_k_inf(int[] prices) {
        int n = prices.length;
        int dp_i_0 = 0, dp_i_1 = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            int temp = dp_i_0;
            dp_i_0 = Math.max(dp_i_0, dp_i_1 + prices[i]);
            dp_i_1 = Math.max(dp_i_1, temp - prices[i]);
        }
        return dp_i_0;
    }
}

