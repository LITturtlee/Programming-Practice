//状态:坐标即为状态
//dp数组:dp[i][j]即为该点最小路径和
//选择:向下或者向右
//状态转移:dp[i][j] += min(dp[i-1][j],dp[i][j-1])
//初始化以这个矩阵进行初始化
class Solution {
    public int minPathSum(int[][] grid) {
        int[][] dp = new int[grid.length][grid[0].length];
        //basecase
       for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                dp[i][j] = grid[i][j];
            }
        }
        for(int i=1;i<grid.length;i++)dp[i][0] += dp[i-1][0];
        for(int j=1;j<grid[0].length;j++)dp[0][j] += dp[0][j-1];


        //遍历选择
        for(int i=1;i<dp.length;i++){
            for(int j=1;j<dp[0].length;j++){
                dp[i][j] += Math.min(dp[i-1][j],dp[i][j-1]);
                // System.out.println(dp[i][j]);
            }
        }

        return dp[grid.length-1][grid[0].length-1];
    }
}