//思路基本和最长公共子序一致。
//注意我们都是从两字符串的尾巴往前计算的
//所以要从字符串起头往前递归

class Solution {
    public int minDistance(String word1, String word2) {
        int[][] dp = new int[word1.length()+1][word2.length()+1];
        
        //basecase
        for(int i=0;i<word1.length()+1;i++){
            dp[i][0] = i;
        }
        for(int j=0;j<word2.length()+1;j++){
            dp[0][j] = j;
        }

        //遍历各状态
        for(int i=1;i<word1.length()+1;i++){
            for(int j=1;j<word2.length()+1;j++){
                //每个状态的三种情况
                if(word1.charAt(i-1)==word2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1];
                }
                else{
                    dp[i][j] = Math.min(dp[i-1][j],dp[i][j-1]) + 1;
                }
            }
        }
        return dp[word1.length()][word2.length()];
    }
}