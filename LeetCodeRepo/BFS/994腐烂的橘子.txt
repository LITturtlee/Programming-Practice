//返回到底要走多少层
//广度搜索，队列缓存当前层腐烂橘子坐标，

class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> queue = new ArrayDeque<>();
        int res = 0, m = 0, n = 0;;
        m = grid.length;
        n = grid[0].length;
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==2){
                    grid[i][j]=0;
                    queue.add(new int[]{i,j});
                }
            }
        }
       //初始腐烂不算时间,所有最后要见一
        while(!queue.isEmpty()){
            res++;
            int len = queue.size();
            for(int i=0;i<len;i++){
                int[] coords = queue.poll();
                //访问了就设置为3,避免重复访问
                grid[coords[0]][coords[1]] = 3;

                if(coords[0]+1<m && grid[coords[0]+1][coords[1]]==1){
                    grid[coords[0]+1][coords[1]]=0;
                    queue.add(new int[]{coords[0]+1,coords[1]});
                }
                if(coords[0]-1>=0 && grid[coords[0]-1][coords[1]]==1){
                    grid[coords[0]-1][coords[1]]=0;
                    queue.add(new int[]{coords[0]-1,coords[1]});
                }
                if(coords[1]+1<n && grid[coords[0]][coords[1]+1]==1){
                    grid[coords[0]][coords[1]+1]=0;
                    queue.add(new int[]{coords[0],coords[1]+1});
                }
                if(coords[1]-1>=0 && grid[coords[0]][coords[1]-1]==1){
                    grid[coords[0]][coords[1]-1]=0;
                    queue.add(new int[]{coords[0],coords[1]-1});
                }
            }
            
        }
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j]==1){
                    return -1;
                }
            }
        }
        return res-1>0?res-1:0;
    }
}